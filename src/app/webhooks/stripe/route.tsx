"use server"
import db from "@/db/db";
import { NextRequest, NextResponse } from "next/server";
import Stripe from "stripe";
import nodemailer from "nodemailer";
import PurchaseReceiptEmail from "@/email/PurchaseReceipt";
import ReactDOMServer from 'react-dom/server';

const stripe = new Stripe(process.env.STRIPE_SECRET_KEY as string, { apiVersion: '2024-06-20' });

export async function POST(req: NextRequest) {
  let event;

  try {
    const rawBody = await req.text();
    const signature = req.headers.get("stripe-signature") as string;
    const webhookSecret = process.env.STRIPE_WEBHOOK_SECRET as string;

    event = stripe.webhooks.constructEvent(rawBody, signature, webhookSecret);
  } catch (err) {
    const errorMessage = (err as Error).message;
    console.error("⚠️ Webhook signature verification failed.", errorMessage);
    return new NextResponse("Webhook signature verification failed.", { status: 400 });
  }

  if (event.type === "charge.succeeded") {
    const charge = event.data.object;
    const productId = charge.metadata.productId;
    const email = charge.billing_details.email;
    const pricePaidInCents = charge.amount;

    const product = await db.product.findUnique({ where: { id: productId } });
    if (!product || !email) {
      return new NextResponse("Bad Request", { status: 400 });
    }

    const userFields = {
      email,
      orders: { create: { productId, pricePaidInCents } },
    };
    const { orders: [order] } = await db.user.upsert({
      where: { email },
      create: userFields,
      update: userFields,
      select: { orders: { orderBy: { createdAt: "desc" }, take: 1 } },
    });

    const downloadVerification = await db.downloadVerification.create({
      data: {
        productId,
        expiresAt: new Date(Date.now() + 1000 * 60 * 60 * 24),
      },
    });

    // Convert the React component into an HTML string
    const emailHtml = ReactDOMServer.renderToStaticMarkup(
      <PurchaseReceiptEmail
        order={order}
        product={product}
        downloadVerificationId={downloadVerification.id}
      />
    );

    // Setup Nodemailer
    const transporter = nodemailer.createTransport({
      service: 'gmail',
      auth: {
        user: process.env.GMAIL_USER,
        pass: process.env.GMAIL_PASS,
      },
    });

    // Send Email
    try {
      await transporter.sendMail({
        from: `Support <${process.env.SENDER_EMAIL}>`,
        to: email,
        subject: "Order Confirmation",
        html: emailHtml,  // Use the HTML generated by your React component
      });

      console.log("Order confirmation email sent successfully!");
    } catch (error) {
      console.error("Failed to send email", error);
    }
  }

  return new NextResponse("Webhook received", { status: 200 });
}


